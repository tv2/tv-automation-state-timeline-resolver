name: Node CI

on:
  push:
    branches:
      - '**'
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
  pull_request:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        lib-name: [timeline-state-resolver, timeline-state-resolver-types]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version-file: '.node-version'
      - name: Prepare Environment
        run: |
          yarn install
          yarn build
        env:
          CI: true
      - name: Run typecheck and linter
        run: |
          cd packages/${{ matrix.lib-name }}
          yarn lint
        env:
          CI: true

  docs:
    name: Check docs generation
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version-file: '.node-version'
      - name: Prepare Environment
        run: |
          yarn install
          yarn build
        env:
          CI: true
      - name: Generate docs
        run: |
          yarn docs
        env:
          CI: true

  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        node-version: [14.x, 16.x]
        lib-name: [timeline-state-resolver, timeline-state-resolver-types]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Prepare Environment
        run: |
          yarn install
          yarn build
        env:
          CI: true
      - name: Run tests
        run: |
          cd packages/${{ matrix.lib-name }}
          yarn unitci
        env:
          CI: true
      - name: Send coverage
        if: matrix.node-version == '16.x'
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
          # name: codecov-umbrella
      # - name: Check docs generation
      #   if: matrix.node-version == '14.x'
      #   run: |
      #     yarn docs:test
      #   env:
      #     CI: true

  release:
    name: Release
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # only run for tags
    if: contains(github.ref, 'refs/tags/')

    needs:
      - test
      # - validate-dependencies

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version-file: '.node-version'
      - name: Check release is desired
        id: do-publish
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "No Token"
          else
            # Use the timeline-state-resolver pcakage to choose 'hotfix' or 'latest'
            PACKAGE_NAME=timeline-state-resolver
            PUBLISHED_VERSION=$(yarn info -s $PACKAGE_NAME version)
            THIS_VERSION=$(node -p "require('./lerna.json').version")
            # Simple bash helper to comapre version numbers
            verlte() {
              [  "$1" = "`echo -e "$1\n$2" | sort -V | head -n1`" ]
            }
            verlt() {
              [ "$1" = "$2" ] && return 1 || verlte $1 $2
            }
            if verlt $PUBLISHED_VERSION $THIS_VERSION
            then
              echo "Publishing latest"
              echo ::set-output name=tag::"latest"
            else
              echo "Publishing hotfix"
              echo ::set-output name=tag::"hotfix"
            fi

          fi
      - name: Prepare build
        if: ${{ steps.do-publish.outputs.tag }}
        run: |
          yarn install
          yarn build
        env:
          CI: true
      - name: Publish to NPM
        if: ${{ steps.do-publish.outputs.tag }}
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc
          yarn rename-tv2
          yarn lerna publish from-package --tag-version-prefix='' --dist-tag ${{ steps.do-publish.outputs.tag }} --yes --no-verify-access
        env:
          CI: true
      - name: Generate docs
        if: ${{ steps.do-publish.outputs.tag }} == 'latest'
        run: |
          yarn docs
      - name: Publish docs
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs

# The latest version of the library 'osc' (at the time of writing) has a hardcoded dependency on 'ws' version 8.13.0 which contains a vulnerability.
# Until 'osc' gets an update our validate dependencies will continue to fail...
#  validate-dependencies:
#    name: Validate production dependencies
#    runs-on: ubuntu-latest
#    continue-on-error: true
#    timeout-minutes: 15
#
#    strategy:
#      fail-fast: false
#      matrix:
#        lib-name: [timeline-state-resolver, timeline-state-resolver-types]
#
#    steps:
#      - uses: actions/checkout@v2
#      - name: Use Node.js
#        uses: actions/setup-node@v2
#        with:
#          node-version-file: '.node-version'
#      - name: Prepare Environment
#        run: |
#          yarn install
#        env:
#          CI: true
#      - name: Validate production dependencies
#        run: |
#          if ! git log --format=oneline -n 1 | grep -q "\[ignore-audit\]"; then
#            cd packages/${{ matrix.lib-name }}
#            yarn validate:dependencies
#          else
#            echo "Skipping audit"
#          fi
#        env:
#          CI: true

#  validate-all-dependencies:
#    name: Validate all dependencies
#    runs-on: ubuntu-latest
#    continue-on-error: true
#    timeout-minutes: 15
#
#    strategy:
#      fail-fast: false
#      matrix:
#        lib-name: [timeline-state-resolver, timeline-state-resolver-types]
#
#    steps:
#      - uses: actions/checkout@v2
#      - name: Use Node.js
#        uses: actions/setup-node@v2
#        with:
#          node-version-file: '.node-version'
#      - name: Prepare Environment
#        run: |
#          yarn install
#        env:
#          CI: true
#      - name: Validate production dependencies
#        run: |
#          cd packages/${{ matrix.lib-name }}
#          yarn validate:dependencies
#        env:
#          CI: true
#      - name: Validate dev dependencies
#        run: |
#          cd packages/${{ matrix.lib-name }}
#          yarn validate:dev-dependencies
#        env:
#          CI: true
